{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"m",
				"markdown_preview"
			],
			[
				"ce",
				"cellspacing	Attr"
			],
			[
				"mat",
				"Material-Theme-Lighter"
			],
			[
				"th",
				"Material-Theme-Lighter"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "######eatdesignlove's TIL\n\n# Today I Learned(TIL)\n- 오늘 새로 배운 것을 다음의 규칙으로 commit 합니다.\n\n## 작성규칙\n- 문서생성은 [Markdownlivepreview](http://markdownlivepreview.com/)을 활용한다.\n- 언어나 기술명으로 폴더를 만든다. \n- 파일명은 영어로\n\n\n\n",
			"file": "README.mdown",
			"file_size": 305,
			"file_write_time": 131108686920000000,
			"settings":
			{
				"buffer_size": 200,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nMarkdown Preview\n----------------\n\n  Sublime Text 2/3 Markdown Preview\n  =================================\n  \n  Preview and build your markdown files quickly in your web browser from sublime text 2/3. \n  \n  You can use builtin [python-markdown][10] parser or use the [github markdown API][5] for the conversion.\n  \n  **NOTE:** If you choose the GitHub API for conversion (set parser: github in your settings), your code will be sent through https to github for live conversion. You'll have [Github flavored markdown][6], syntax highlighting and EMOJI support for free :heart: :octocat: :gift:. If you make more than 60 calls a day, be sure to set your GitHub API key in the settings :). You can also get most of this in the default Markdown parser with by enabling certain extensions; see \"[Parsing Github Flavored Markdown](#parsing-github-flavored-markdown-)\"\" below for more information.\n  \n  **LINUX users:** If you want to use GitHub API for conversion, you'll need to have a custom Python install that includes python-ssl as its not built in the Sublime Text 2 Linux package. see [@dusteye comment][8]. If you use a custom window manager, also be sure to set a `BROWSER` environment variable. see [@PPvG comments][9]\n  \n  ## Features :\n  \n   - Markdown preview using the [Python-markdown][10] or the Github API just choose select the build commands.\n   - Syntax highlighting via Pygments. See \"[Configuring Pygments](#configuring-pygments)\" for more info.\n   - Build markdown file using Sublime Text build system. The build parser are config via the `\"parser\"` config.\n   - Browser preview auto reload on save if you have the [ST2 LiveReload plugin][7] installed.\n   - Builtin parser : supports `abbr`, `attr_list`, `def_list`, `fenced_code`, `footnotes`, `tables`, `smart_strong`, `smarty`,  `wikilinks`, `meta`, `sane_lists`, `codehilite`, `nl2br`, and `toc` markdown extensions.\n   - CSS search path for local and build-in CSS files (always enabled) and/or CSS overriding if you need\n   - YAML support thanks to @tommi\n   - Clipboard selection and copy to clipboard thanks to @hexatrope\n   - MathJax support : \\\\\\\\(\\frac{\\pi}{2}\\\\\\\\) thanks to @bps10\n   - HTML template customisation thanks to @hozaka\n   - Embed images as base64 (see [settings][settings] file for more info)\n   - Strip out multimarkdown critic marks from either Githubs or Python Markdown input source (see [settings][settings] file for more info)\n   - 3rd party extensions for the Python Markdown parser:\n  \n      | Extension | Documentation |\n      |-----------|---------------|\n      | magiclink | Find and convert HTML links and email address to links ([MagicLink Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/magiclink/)). |\n      | delete | Surround inline text with `~~strike through~~` to get del tags ~~strike through~~. |\n      | insert | Surround inline text with `^^underlined^^` to get ins tags <ins>underlined</ins>. |\n      | tasklist | Github Flavored Markdown tasklists ([Tasklist Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/tasklist/)). |\n      | githubemoji | Support for Github Flavored Markdown emojis ([GithubEmoji Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/githubemoji/)). |\n      | headeranchor | Github Flavored Markdown style header anchors ([HeaderAnchor Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/headeranchor/)). |\n      | github | A convenience extension to add: `magiclink`, `delete`, `tasklist`, `githubemoji`, `headeranchor`, `superfences`, and `nl2br` to parse and display Markdown in a github-ish way.  It is recommed to pair `github` with `extra` and `codehilite` (with language guessing off) to parse close to github's way.  Be aware of what extensions `github` loads, because you should not load extensions more than once. |\n      | progressbar | Create progress bars ([ProgressBar Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/progressbar/)). |\n      | superfences | Allow fenced blocks to be nested under lists, blockquotes, etc. and add special UML diagram blocks ([SuperFences Documentation](http://facelessuser.github.io/pymdown-extensions/extensions/superfences/)). |\n  \n  ## Installation :\n  \n  ### Using [Package Control][3] (*Recommended*)\n  \n  For all Sublime Text 2/3 users we recommend install via [Package Control][3].\n  \n  1. [Install][11] Package Control if you haven't yet.\n  2. Use <kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>P</kbd> then `Package Control: Install Package`\n  3. Look for `Markdown Preview` and install it.\n  \n  ### Manual Install\n  \n  1. Click the `Preferences > Browse Packages…` menu\n  2. Browse up a folder and then into the `Installed Packages/` folder\n  3. Download [zip package][12] rename it to `Markdown Preview.sublime-package` and copy it into the `Installed Packages/` directory\n  4. Restart Sublime Text\n  \n  ## Usage :\n  \n  ### To preview :\n  \n   - optionally select some of your markdown for conversion\n   - use <kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>P</kbd> then `Markdown Preview` to show the follow commands (you will be prompted to select which parser you prefer):\n  	- Markdown Preview: Preview in Browser\n  	- Markdown Preview: Export HTML in Sublime Text\n  	- Markdown Preview: Copy to Clipboard\n  	- Markdown Preview: Open Markdown Cheat sheet\n   - or bind some key in your user key binding, using a line like this one:\n     `{ \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\": {\"target\": \"browser\", \"parser\":\"markdown\"} },` for a specific parser and target or `{ \"keys\": [\"alt+m\"], \"command\": \"markdown_preview_select\", \"args\": {\"target\": \"browser\"} },` to bring up the quick panel to select enabled parsers for a given target.\n   - once converted a first time, the output HTML will be updated on each file save (with LiveReload plugin)\n  \n  ### Enabling Other External Markdown Parsers :\n  \n  External parser commands and arguments should first be mapped to a name.  The path to the binary should be first, followed by flags etc.\n  \n  ```js\n      \"markdown_binary_map\": {\n          \"multimarkdown\": [\"/usr/local/bin/multimarkdown\"]\n      },\n  ```\n  \n  Then the name can be placed in `enabled_parsers` to enable use of the new parser.\n  \n  ```js\n      \"enabled_parsers\": [\"markdown\", \"github\", \"multimarkdown\"],\n  ```\n  \n  ### To build :\n  \n   - Just use <kbd>ctrl</kbd>+<kbd>B</kbd> (Windows/Linux) or <kbd>cmd</kbd>+<kbd>B</kbd> (Mac) to build current file.\n  \n  ### To config :\n  \n  Using Sublime Text menu: `Preferences`->`Package Settings`->`Markdown Preview`\n  \n  - `Settings - User` is where you change your settings for Markdown Preview.\n  - `Settings - Default` is a good reference with detailed descriptions for each setting.\n  \n  ### Configuring Pygments\n  If you add the codehilite extension manually in the enabled extensions, you can override some of the default settings.\n  \n  * Turn language guessing *on* or *off* (*on* will highlight fenced blocks even if you don't specify a language)  `codehilite(guess_lang=False)` (True|False).\n  * Show line numbers: `codehilite(linenums=True)` (True|False).\n  * Change the higlight theme: `codehilite(pygments_style=emacs)`.\n  * Inline the CSS: `codehilite(noclasses=True)` (True|False).\n  * Use multiple: `codehilite(linenums=True, pygments_style-emacs)`.\n  \n  See [codehilte page](https://pythonhosted.org/Markdown/extensions/code_hilite.html) for more info.\n  \n  ### Meta Data Support\n  When the `meta` extension is enabled (https://pythonhosted.org/Markdown/extensions/meta_data.html), the results will be written to the HTML head in the form `<meta name=\"key\" content=\"value1,value2\">`.  `title` is the one exception, and its content will be written to the title tag in the HTML head.\n  \n  ### YAML Frontmatter Support\n  YAML frontmatter can be stripped out and read when `strip_yaml_front_matter` is set to  `true` in the settings file.  In general the, the fronmatter is handled the same as [meta data](#meta-data-support), but if both exist in a file, the YAML keys will override the `meta` extension keys.  There are a few special keys names that won't be handled as html meta data.\n  \n  #### Special YAML Key Names\n  Yaml frontmatter has a few special key names that are used that will not be handled as meta data:\n  \n  - **basepath**: An absolute path to configure the relative paths for images etc. (for when the markdown is supposed to reference images in a different location.)\n  - **references**: Can take a file path or an array of file paths for separate markdown files containing references, footnotes, etc.  Can be an absolute path or relative path.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the `basepath` setting.\n  - **destination**: This is an absolute file path or relative file path for when the markdown is saved to html via the build command or the `Save to HTML` command.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the `basepath` setting.\n  - **settings**: This is a dictionary where you can override settings that are in the settings file.\n  \n  #### Example\n  ```yaml\n  ---\n      # Builtin values\n      references:\n          - references.md\n          - abbreviations.md\n          - footnotes.md\n  \n      destination: destination.html\n  \n      # Meta Data\n      title: Test Page\n      author:\n          - John Doe\n          - Jane Doe\n  \n      # Settings overrides\n      settings:\n          enabled_extensions:\n          - extra\n          - github\n          - toc\n          - headerid\n          - smarty(smart_quotes=False) # smart quotes interferes with attr_list\n          - meta\n          - wikilinks\n          - admonition\n          - codehilite(guess_lang=False,pygments_style=github)\n  ---\n  ```\n  \n  ### Parsing Github Flavored Markdown :\n  Github Flavored Mardown (GFM) is a very popular markdown.  Markdown Preview can actually handle them in a couple of ways: online and offline.\n  \n  #### Online :\n  Parsing GFM using the online method requires using the Github API as the parser.  It may also require setting `github_mode` to `gfm` to get things like tasklists to render properly.\n  \n  #### Offline :\n  By default almost all extensions are enabled to help with the github feel, but there are some tweaks needed to get the full experience.\n  \n  GFM does not auto guess language in fenced blocks, but Markdown Preview does this by default.  You can fix this in one of two ways:\n  \n  1. Disable auto language guessing in the settings file `\"guess_language\": false,`\n  2. Or if you are manually defining extensions: `\"enabled_extensions\": [\"codehilite(guess_lang=False,pygments_style=github)\"]`\n  \n  \n  As mentioned earlier, almost all extensions are enabled by default, but as a reference, the minimum extensions that should be enabled are listed below:\n  \n  ```javascript\n  	\"enabled_extensions\": [\n  		\"extra\",\n  		\"github\",\n  		\"codehilite(guess_lang=False,pygments_style=github)\"\n  	]\n  ```\n  \n  This may be further enhanced in the future.\n  \n  \n  ## Support :\n  \n  - Any bugs about Markdown Preview please feel free to report [here][issue].\n  - And you are welcome to fork and submit pullrequests.\n  \n  \n  ## License :\n  \n  The code is available at github [project][home] under [MIT licence][4].\n  \n   [home]: https://github.com/revolunet/sublimetext-markdown-preview\n   [3]: https://packagecontrol.io/\n   [4]: http://revolunet.mit-license.org\n   [5]: https://developer.github.com/v3/markdown/\n   [6]: https://help.github.com/articles/github-flavored-markdown/\n   [7]: https://github.com/dz0ny/LiveReload-sublimetext2\n   [8]: https://github.com/revolunet/sublimetext-markdown-preview/issues/27#issuecomment-11772098\n   [9]: https://github.com/revolunet/sublimetext-markdown-preview/issues/78#issuecomment-15644727\n   [10]: https://github.com/waylan/Python-Markdown\n   [11]: https://packagecontrol.io/installation\n   [12]: https://github.com/revolunet/sublimetext-markdown-preview/archive/master.zip\n   [issue]: https://github.com/revolunet/sublimetext-markdown-preview/issues\n   [settings]: https://github.com/revolunet/sublimetext-markdown-preview/blob/master/MarkdownPreview.sublime-settings\n",
			"settings":
			{
				"buffer_size": 12283,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
			"settings":
			{
				"buffer_size": 521,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 149.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"color",
				"Color Picker: Insert Color"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"co",
				"Color Picker: Insert Color"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"comi",
				"Git: Commit"
			],
			[
				"git cus",
				"Git: Custom Command"
			],
			[
				"git cust",
				"Git: Custom Command"
			],
			[
				"git init",
				"Git: Diff All Files (Ignore Whitespace)"
			],
			[
				"git",
				"Git: Add..."
			],
			[
				"em",
				"Emmet: Merge Lines"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"plan",
				"Set Syntax: Plain Text"
			],
			[
				"",
				"About"
			],
			[
				"css",
				"Set Syntax: CSS"
			],
			[
				"!	",
				"Snippet: #!/usr/bin/env"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"instap",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 155.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"div",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/eatdesignlove/Documents/TIL"
	],
	"file_history":
	[
		"/Users/eatdesignlove/Desktop/FDS/HTML/emmet.html",
		"/Users/eatdesignlove/Desktop/FDS/Day01/README.md",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Emmet.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/ColorPicker.sublime-settings",
		"/Users/eatdesignlove/Desktop/FDS/Week1/emmet.html",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/ColorPicker/ColorPicker.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/ApplySyntax/ApplySyntax.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/ApplySyntax.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Emmet/Default (OSX).sublime-keymap",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Emmet/Emmet.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Default/Default ().sublime-keymap",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/eatdesignlove/Desktop/FDS/Day04/01-images.html",
		"/Users/eatdesignlove/Desktop/FDS/Day03/hello-git/views/about-git.html",
		"/Users/eatdesignlove/Desktop/FDS/Day03/hello-git/views/contact.html",
		"/Users/eatdesignlove/Desktop/FDS/Day03/hello-git/views/just-do-git.html",
		"/Users/eatdesignlove/Desktop/FDS/Day03/hello-git/index.html",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Side Bar.sublime-settings",
		"/Users/eatdesignlove/Desktop/FDS/Day04/README.md",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/SideBarEnhancements/Default (OSX).sublime-keymap",
		"/Users/eatdesignlove/Desktop/FDS/Day03/hello-git/css/style.css",
		"/Users/eatdesignlove/Desktop/FDS/Day02/README.md",
		"/Users/eatdesignlove/github-practice/a.html",
		"/Users/eatdesignlove/github-practice/README.md",
		"/Users/eatdesignlove/github-practice/b.html",
		"/Users/eatdesignlove/github-practice/file2.html",
		"/Users/eatdesignlove/github-practice/file1.html",
		"/Users/eatdesignlove/Desktop/FDS/Day03/keepticle/index.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice3/views/projects.html",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/snippets/placehold.sublime-snippet",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice4/index.html",
		"/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/snippets/cc4ie.sublime-snippet",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2/views/services.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2/views/projects.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2/views/contact.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2/views/about.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2/index.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/index.html",
		"/Users/eatdesignlove/Desktop/FDS/Day02/practice2.html",
		"/Users/eatdesignlove/Desktop/FDS/20160615/README.md",
		"/Users/eatdesignlove/Desktop/FDS/Day01/readme",
		"/Users/eatdesignlove/Desktop/FDS/20160615/index.html",
		"/Users/eatdesignlove/Desktop/FDS/20160614/index.html",
		"/Users/eatdesignlove/Desktop/FDS/20160614/README.md",
		"/Users/eatdesignlove/Desktop/FDS/20160615/practice.html",
		"/Users/eatdesignlove/Desktop/FDS/20160615/2016 6 15 Day 2",
		"/Users/eatdesignlove/Desktop/FDS/20160615/2016 6 15 Day 2.html",
		"/Users/eatdesignlove/Desktop/FDS/20160614/2016 6 14 Day 1",
		"/Users/eatdesignlove/Desktop/프론트앤드개발스쿨/20160614/css/style.css"
	],
	"find":
	{
		"height": 32.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"(",
			"aria",
			"wai",
			"span=\"1\"",
			"span=\"1\" ",
			"pick",
			"color",
			"c",
			"\n	",
			"	ul>li",
			"new_file",
			" ",
			"&",
			"p",
			"osf",
			";&",
			"green",
			"로램",
			"로렘",
			"Lorem",
			"consectetur",
			"<a href=\"http://daum.net\">Lorem ipsum dolor sit</a>",
			"minimap",
			"tab",
			"=\"/\">\n",
			"330",
			"1000",
			"jpg",
			"h2",
			"가능",
			"Working Directory",
			"eatdesignlove",
			"Version Control System",
			"자세히 보기",
			"GIT",
			"Git",
			"GIT",
			"Git",
			"GIT",
			"\"/\"",
			"/",
			"-it",
			"{",
			"subjects-",
			"subjects-lists",
			"</div>",
			"</a>",
			"Service",
			"Project",
			"href=\"",
			"\"><",
			"Optional",
			"2",
			"side",
			"octto",
			" "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.mdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 200,
						"regions":
						{
						},
						"selection":
						[
							[
								200,
								200
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12283,
						"regions":
						{
						},
						"selection":
						[
							[
								5492,
								5726
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_indent": false,
							"default_dir": "/Users/eatdesignlove/Documents/TIL",
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 2696.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/eatdesignlove/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 521,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 31.0
	},
	"pinned_build_system": "",
	"project": "TIL.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Desktop/FDS/fds.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 204.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
